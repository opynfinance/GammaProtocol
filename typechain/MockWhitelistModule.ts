/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockWhitelistModuleInterface extends utils.Interface {
  contractName: "MockWhitelistModule";
  functions: {
    "_isWhitelistedOtoken(address)": FunctionFragment;
    "blacklistCallee(address)": FunctionFragment;
    "isWhitelistedCallee(address)": FunctionFragment;
    "isWhitelistedCollateral(address)": FunctionFragment;
    "isWhitelistedOtoken(address)": FunctionFragment;
    "isWhitelistedProduct(address,address,address,bool)": FunctionFragment;
    "whitelistCallee(address)": FunctionFragment;
    "whitelistCollateral(address)": FunctionFragment;
    "whitelistOtoken(address)": FunctionFragment;
    "whitelistProduct(address,address,address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_isWhitelistedOtoken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistCallee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedCallee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedOtoken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedProduct",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistCallee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistOtoken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistProduct",
    values: [string, string, string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "_isWhitelistedOtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistCallee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedCallee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedOtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistCallee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistOtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistProduct",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockWhitelistModule extends BaseContract {
  contractName: "MockWhitelistModule";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockWhitelistModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _isWhitelistedOtoken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    blacklistCallee(
      _callee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isWhitelistedCallee(
      _callee: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    whitelistCallee(
      _callee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistCollateral(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistOtoken(
      _otoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _isWhitelistedOtoken(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  blacklistCallee(
    _callee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isWhitelistedCallee(
    _callee: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedCollateral(
    _collateral: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedOtoken(
    _otoken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedProduct(
    _underlying: string,
    _strike: string,
    _collateral: string,
    _isPut: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistCallee(
    _callee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistCollateral(
    _collateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistOtoken(
    _otoken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistProduct(
    _underlying: string,
    _strike: string,
    _collateral: string,
    _isPut: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _isWhitelistedOtoken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    blacklistCallee(_callee: string, overrides?: CallOverrides): Promise<void>;

    isWhitelistedCallee(
      _callee: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistCallee(_callee: string, overrides?: CallOverrides): Promise<void>;

    whitelistCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistOtoken(_otoken: string, overrides?: CallOverrides): Promise<void>;

    whitelistProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    _isWhitelistedOtoken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistCallee(
      _callee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isWhitelistedCallee(
      _callee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistCallee(
      _callee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistCollateral(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistOtoken(
      _otoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _isWhitelistedOtoken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistCallee(
      _callee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isWhitelistedCallee(
      _callee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistCallee(
      _callee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistCollateral(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistOtoken(
      _otoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
