/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Actions {
  export type BurnArgsStruct = {
    owner: string;
    vaultId: BigNumberish;
    from: string;
    otoken: string;
    index: BigNumberish;
    amount: BigNumberish;
  };

  export type BurnArgsStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    vaultId: BigNumber;
    from: string;
    otoken: string;
    index: BigNumber;
    amount: BigNumber;
  };

  export type CallArgsStruct = { callee: string; data: BytesLike };

  export type CallArgsStructOutput = [string, string] & {
    callee: string;
    data: string;
  };

  export type DepositArgsStruct = {
    owner: string;
    vaultId: BigNumberish;
    from: string;
    asset: string;
    index: BigNumberish;
    amount: BigNumberish;
  };

  export type DepositArgsStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    vaultId: BigNumber;
    from: string;
    asset: string;
    index: BigNumber;
    amount: BigNumber;
  };

  export type LiquidateArgsStruct = {
    owner: string;
    receiver: string;
    vaultId: BigNumberish;
    amount: BigNumberish;
    roundId: BigNumberish;
  };

  export type LiquidateArgsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    receiver: string;
    vaultId: BigNumber;
    amount: BigNumber;
    roundId: BigNumber;
  };

  export type MintArgsStruct = {
    owner: string;
    vaultId: BigNumberish;
    to: string;
    otoken: string;
    index: BigNumberish;
    amount: BigNumberish;
  };

  export type MintArgsStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    vaultId: BigNumber;
    to: string;
    otoken: string;
    index: BigNumber;
    amount: BigNumber;
  };

  export type OpenVaultArgsStruct = {
    owner: string;
    vaultId: BigNumberish;
    vaultType: BigNumberish;
  };

  export type OpenVaultArgsStructOutput = [string, BigNumber, BigNumber] & {
    owner: string;
    vaultId: BigNumber;
    vaultType: BigNumber;
  };

  export type RedeemArgsStruct = {
    receiver: string;
    otoken: string;
    amount: BigNumberish;
  };

  export type RedeemArgsStructOutput = [string, string, BigNumber] & {
    receiver: string;
    otoken: string;
    amount: BigNumber;
  };

  export type SettleVaultArgsStruct = {
    owner: string;
    vaultId: BigNumberish;
    to: string;
  };

  export type SettleVaultArgsStructOutput = [string, BigNumber, string] & {
    owner: string;
    vaultId: BigNumber;
    to: string;
  };

  export type WithdrawArgsStruct = {
    owner: string;
    vaultId: BigNumberish;
    to: string;
    asset: string;
    index: BigNumberish;
    amount: BigNumberish;
  };

  export type WithdrawArgsStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    vaultId: BigNumber;
    to: string;
    asset: string;
    index: BigNumber;
    amount: BigNumber;
  };

  export type ActionArgsStruct = {
    actionType: BigNumberish;
    owner: string;
    secondAddress: string;
    asset: string;
    vaultId: BigNumberish;
    amount: BigNumberish;
    index: BigNumberish;
    data: BytesLike;
  };

  export type ActionArgsStructOutput = [
    number,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    actionType: number;
    owner: string;
    secondAddress: string;
    asset: string;
    vaultId: BigNumber;
    amount: BigNumber;
    index: BigNumber;
    data: string;
  };
}

export interface ActionTesterInterface extends utils.Interface {
  contractName: "ActionTester";
  functions: {
    "getBurnArgs()": FunctionFragment;
    "getCallArgs()": FunctionFragment;
    "getDepositArgs()": FunctionFragment;
    "getLiquidateArgs()": FunctionFragment;
    "getMintArgs()": FunctionFragment;
    "getOpenVaultArgs()": FunctionFragment;
    "getRedeemArgs()": FunctionFragment;
    "getSettleVaultArgs()": FunctionFragment;
    "getWithdrawArgs()": FunctionFragment;
    "testParseBurnAction((uint8,address,address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
    "testParseCallAction((uint8,address,address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
    "testParseDespositAction((uint8,address,address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
    "testParseLiquidateActions((uint8,address,address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
    "testParseMintAction((uint8,address,address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
    "testParseOpenVaultAction((uint8,address,address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
    "testParseRedeemAction((uint8,address,address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
    "testParseSettleVaultAction((uint8,address,address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
    "testParseWithdrawAction((uint8,address,address,address,uint256,uint256,uint256,bytes))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBurnArgs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCallArgs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositArgs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidateArgs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintArgs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenVaultArgs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemArgs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettleVaultArgs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawArgs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testParseBurnAction",
    values: [Actions.ActionArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testParseCallAction",
    values: [Actions.ActionArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testParseDespositAction",
    values: [Actions.ActionArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testParseLiquidateActions",
    values: [Actions.ActionArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testParseMintAction",
    values: [Actions.ActionArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testParseOpenVaultAction",
    values: [Actions.ActionArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testParseRedeemAction",
    values: [Actions.ActionArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testParseSettleVaultAction",
    values: [Actions.ActionArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testParseWithdrawAction",
    values: [Actions.ActionArgsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBurnArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCallArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidateArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenVaultArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettleVaultArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testParseBurnAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testParseCallAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testParseDespositAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testParseLiquidateActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testParseMintAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testParseOpenVaultAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testParseRedeemAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testParseSettleVaultAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testParseWithdrawAction",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ActionTester extends BaseContract {
  contractName: "ActionTester";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ActionTesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBurnArgs(
      overrides?: CallOverrides
    ): Promise<[Actions.BurnArgsStructOutput]>;

    getCallArgs(
      overrides?: CallOverrides
    ): Promise<[Actions.CallArgsStructOutput]>;

    getDepositArgs(
      overrides?: CallOverrides
    ): Promise<[Actions.DepositArgsStructOutput]>;

    getLiquidateArgs(
      overrides?: CallOverrides
    ): Promise<[Actions.LiquidateArgsStructOutput]>;

    getMintArgs(
      overrides?: CallOverrides
    ): Promise<[Actions.MintArgsStructOutput]>;

    getOpenVaultArgs(
      overrides?: CallOverrides
    ): Promise<[Actions.OpenVaultArgsStructOutput]>;

    getRedeemArgs(
      overrides?: CallOverrides
    ): Promise<[Actions.RedeemArgsStructOutput]>;

    getSettleVaultArgs(
      overrides?: CallOverrides
    ): Promise<[Actions.SettleVaultArgsStructOutput]>;

    getWithdrawArgs(
      overrides?: CallOverrides
    ): Promise<[Actions.WithdrawArgsStructOutput]>;

    testParseBurnAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testParseCallAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testParseDespositAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testParseLiquidateActions(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testParseMintAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testParseOpenVaultAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testParseRedeemAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testParseSettleVaultAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testParseWithdrawAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getBurnArgs(overrides?: CallOverrides): Promise<Actions.BurnArgsStructOutput>;

  getCallArgs(overrides?: CallOverrides): Promise<Actions.CallArgsStructOutput>;

  getDepositArgs(
    overrides?: CallOverrides
  ): Promise<Actions.DepositArgsStructOutput>;

  getLiquidateArgs(
    overrides?: CallOverrides
  ): Promise<Actions.LiquidateArgsStructOutput>;

  getMintArgs(overrides?: CallOverrides): Promise<Actions.MintArgsStructOutput>;

  getOpenVaultArgs(
    overrides?: CallOverrides
  ): Promise<Actions.OpenVaultArgsStructOutput>;

  getRedeemArgs(
    overrides?: CallOverrides
  ): Promise<Actions.RedeemArgsStructOutput>;

  getSettleVaultArgs(
    overrides?: CallOverrides
  ): Promise<Actions.SettleVaultArgsStructOutput>;

  getWithdrawArgs(
    overrides?: CallOverrides
  ): Promise<Actions.WithdrawArgsStructOutput>;

  testParseBurnAction(
    _args: Actions.ActionArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testParseCallAction(
    _args: Actions.ActionArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testParseDespositAction(
    _args: Actions.ActionArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testParseLiquidateActions(
    _args: Actions.ActionArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testParseMintAction(
    _args: Actions.ActionArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testParseOpenVaultAction(
    _args: Actions.ActionArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testParseRedeemAction(
    _args: Actions.ActionArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testParseSettleVaultAction(
    _args: Actions.ActionArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testParseWithdrawAction(
    _args: Actions.ActionArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBurnArgs(
      overrides?: CallOverrides
    ): Promise<Actions.BurnArgsStructOutput>;

    getCallArgs(
      overrides?: CallOverrides
    ): Promise<Actions.CallArgsStructOutput>;

    getDepositArgs(
      overrides?: CallOverrides
    ): Promise<Actions.DepositArgsStructOutput>;

    getLiquidateArgs(
      overrides?: CallOverrides
    ): Promise<Actions.LiquidateArgsStructOutput>;

    getMintArgs(
      overrides?: CallOverrides
    ): Promise<Actions.MintArgsStructOutput>;

    getOpenVaultArgs(
      overrides?: CallOverrides
    ): Promise<Actions.OpenVaultArgsStructOutput>;

    getRedeemArgs(
      overrides?: CallOverrides
    ): Promise<Actions.RedeemArgsStructOutput>;

    getSettleVaultArgs(
      overrides?: CallOverrides
    ): Promise<Actions.SettleVaultArgsStructOutput>;

    getWithdrawArgs(
      overrides?: CallOverrides
    ): Promise<Actions.WithdrawArgsStructOutput>;

    testParseBurnAction(
      _args: Actions.ActionArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testParseCallAction(
      _args: Actions.ActionArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testParseDespositAction(
      _args: Actions.ActionArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testParseLiquidateActions(
      _args: Actions.ActionArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testParseMintAction(
      _args: Actions.ActionArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testParseOpenVaultAction(
      _args: Actions.ActionArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testParseRedeemAction(
      _args: Actions.ActionArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testParseSettleVaultAction(
      _args: Actions.ActionArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testParseWithdrawAction(
      _args: Actions.ActionArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getBurnArgs(overrides?: CallOverrides): Promise<BigNumber>;

    getCallArgs(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositArgs(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidateArgs(overrides?: CallOverrides): Promise<BigNumber>;

    getMintArgs(overrides?: CallOverrides): Promise<BigNumber>;

    getOpenVaultArgs(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemArgs(overrides?: CallOverrides): Promise<BigNumber>;

    getSettleVaultArgs(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawArgs(overrides?: CallOverrides): Promise<BigNumber>;

    testParseBurnAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testParseCallAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testParseDespositAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testParseLiquidateActions(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testParseMintAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testParseOpenVaultAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testParseRedeemAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testParseSettleVaultAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testParseWithdrawAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBurnArgs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCallArgs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositArgs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidateArgs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintArgs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOpenVaultArgs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedeemArgs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSettleVaultArgs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawArgs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testParseBurnAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testParseCallAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testParseDespositAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testParseLiquidateActions(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testParseMintAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testParseOpenVaultAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testParseRedeemAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testParseSettleVaultAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testParseWithdrawAction(
      _args: Actions.ActionArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
