/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ZeroXExchangeInterface {
  export type LimitOrderStruct = {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumberish;
    takerAmount: BigNumberish;
    takerTokenFeeAmount: BigNumberish;
    maker: string;
    taker: string;
    sender: string;
    feeRecipient: string;
    pool: BytesLike;
    expiry: BigNumberish;
    salt: BigNumberish;
  };

  export type LimitOrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumber;
    takerAmount: BigNumber;
    takerTokenFeeAmount: BigNumber;
    maker: string;
    taker: string;
    sender: string;
    feeRecipient: string;
    pool: string;
    expiry: BigNumber;
    salt: BigNumber;
  };

  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [number, number, string, string] & {
    signatureType: number;
    v: number;
    r: string;
    s: string;
  };
}

export interface Mock0xExchangeInterface extends utils.Interface {
  contractName: "Mock0xExchange";
  functions: {
    "batchFillLimitOrders((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],uint128[],bool)": FunctionFragment;
    "called()": FunctionFragment;
    "fillAmount()": FunctionFragment;
    "fillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "makerAmount()": FunctionFragment;
    "proxy()": FunctionFragment;
    "signature()": FunctionFragment;
    "takerAmount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchFillLimitOrders",
    values: [
      ZeroXExchangeInterface.LimitOrderStruct[],
      ZeroXExchangeInterface.SignatureStruct[],
      BigNumberish[],
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "called", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fillAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillLimitOrder",
    values: [
      ZeroXExchangeInterface.LimitOrderStruct,
      ZeroXExchangeInterface.SignatureStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makerAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proxy", values?: undefined): string;
  encodeFunctionData(functionFragment: "signature", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "takerAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "batchFillLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "called", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signature", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takerAmount",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Mock0xExchange extends BaseContract {
  contractName: "Mock0xExchange";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Mock0xExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchFillLimitOrders(
      _orders: ZeroXExchangeInterface.LimitOrderStruct[],
      _signatures: ZeroXExchangeInterface.SignatureStruct[],
      _takerTokenFillAmounts: BigNumberish[],
      _revertIfIncomplete: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    called(overrides?: CallOverrides): Promise<[BigNumber]>;

    fillAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    fillLimitOrder(
      _order: ZeroXExchangeInterface.LimitOrderStruct,
      _signature: ZeroXExchangeInterface.SignatureStruct,
      _takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makerAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxy(overrides?: CallOverrides): Promise<[string]>;

    signature(overrides?: CallOverrides): Promise<[string]>;

    takerAmount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  batchFillLimitOrders(
    _orders: ZeroXExchangeInterface.LimitOrderStruct[],
    _signatures: ZeroXExchangeInterface.SignatureStruct[],
    _takerTokenFillAmounts: BigNumberish[],
    _revertIfIncomplete: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  called(overrides?: CallOverrides): Promise<BigNumber>;

  fillAmount(overrides?: CallOverrides): Promise<BigNumber>;

  fillLimitOrder(
    _order: ZeroXExchangeInterface.LimitOrderStruct,
    _signature: ZeroXExchangeInterface.SignatureStruct,
    _takerTokenFillAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makerAmount(overrides?: CallOverrides): Promise<BigNumber>;

  proxy(overrides?: CallOverrides): Promise<string>;

  signature(overrides?: CallOverrides): Promise<string>;

  takerAmount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    batchFillLimitOrders(
      _orders: ZeroXExchangeInterface.LimitOrderStruct[],
      _signatures: ZeroXExchangeInterface.SignatureStruct[],
      _takerTokenFillAmounts: BigNumberish[],
      _revertIfIncomplete: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        takerTokenFilledAmounts: BigNumber[];
        makerTokenFilledAmounts: BigNumber[];
      }
    >;

    called(overrides?: CallOverrides): Promise<BigNumber>;

    fillAmount(overrides?: CallOverrides): Promise<BigNumber>;

    fillLimitOrder(
      _order: ZeroXExchangeInterface.LimitOrderStruct,
      _signature: ZeroXExchangeInterface.SignatureStruct,
      _takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    makerAmount(overrides?: CallOverrides): Promise<BigNumber>;

    proxy(overrides?: CallOverrides): Promise<string>;

    signature(overrides?: CallOverrides): Promise<string>;

    takerAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    batchFillLimitOrders(
      _orders: ZeroXExchangeInterface.LimitOrderStruct[],
      _signatures: ZeroXExchangeInterface.SignatureStruct[],
      _takerTokenFillAmounts: BigNumberish[],
      _revertIfIncomplete: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    called(overrides?: CallOverrides): Promise<BigNumber>;

    fillAmount(overrides?: CallOverrides): Promise<BigNumber>;

    fillLimitOrder(
      _order: ZeroXExchangeInterface.LimitOrderStruct,
      _signature: ZeroXExchangeInterface.SignatureStruct,
      _takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makerAmount(overrides?: CallOverrides): Promise<BigNumber>;

    proxy(overrides?: CallOverrides): Promise<BigNumber>;

    signature(overrides?: CallOverrides): Promise<BigNumber>;

    takerAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    batchFillLimitOrders(
      _orders: ZeroXExchangeInterface.LimitOrderStruct[],
      _signatures: ZeroXExchangeInterface.SignatureStruct[],
      _takerTokenFillAmounts: BigNumberish[],
      _revertIfIncomplete: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    called(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fillAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fillLimitOrder(
      _order: ZeroXExchangeInterface.LimitOrderStruct,
      _signature: ZeroXExchangeInterface.SignatureStruct,
      _takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makerAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signature(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takerAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
