/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MarginPoolInterfaceInterface extends utils.Interface {
  contractName: "MarginPoolInterface";
  functions: {
    "addressBook()": FunctionFragment;
    "batchTransferToPool(address[],address[],uint256[])": FunctionFragment;
    "batchTransferToUser(address[],address[],uint256[])": FunctionFragment;
    "farm(address,address,uint256)": FunctionFragment;
    "farmer()": FunctionFragment;
    "getStoredBalance(address)": FunctionFragment;
    "setFarmer(address)": FunctionFragment;
    "transferToPool(address,address,uint256)": FunctionFragment;
    "transferToUser(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferToPool",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferToUser",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "farm",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "farmer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStoredBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFarmer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferToPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToUser",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farmer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStoredBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFarmer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToUser",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MarginPoolInterface extends BaseContract {
  contractName: "MarginPoolInterface";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarginPoolInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressBook(overrides?: CallOverrides): Promise<[string]>;

    batchTransferToPool(
      _asset: string[],
      _user: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchTransferToUser(
      _asset: string[],
      _user: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farm(
      _asset: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmer(overrides?: CallOverrides): Promise<[string]>;

    getStoredBalance(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFarmer(
      _farmer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToPool(
      _asset: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToUser(
      _asset: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addressBook(overrides?: CallOverrides): Promise<string>;

  batchTransferToPool(
    _asset: string[],
    _user: string[],
    _amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchTransferToUser(
    _asset: string[],
    _user: string[],
    _amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farm(
    _asset: string,
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmer(overrides?: CallOverrides): Promise<string>;

  getStoredBalance(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFarmer(
    _farmer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToPool(
    _asset: string,
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToUser(
    _asset: string,
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressBook(overrides?: CallOverrides): Promise<string>;

    batchTransferToPool(
      _asset: string[],
      _user: string[],
      _amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchTransferToUser(
      _asset: string[],
      _user: string[],
      _amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    farm(
      _asset: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    farmer(overrides?: CallOverrides): Promise<string>;

    getStoredBalance(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFarmer(_farmer: string, overrides?: CallOverrides): Promise<void>;

    transferToPool(
      _asset: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToUser(
      _asset: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addressBook(overrides?: CallOverrides): Promise<BigNumber>;

    batchTransferToPool(
      _asset: string[],
      _user: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchTransferToUser(
      _asset: string[],
      _user: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farm(
      _asset: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmer(overrides?: CallOverrides): Promise<BigNumber>;

    getStoredBalance(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFarmer(
      _farmer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToPool(
      _asset: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToUser(
      _asset: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchTransferToPool(
      _asset: string[],
      _user: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchTransferToUser(
      _asset: string[],
      _user: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farm(
      _asset: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStoredBalance(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFarmer(
      _farmer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToPool(
      _asset: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToUser(
      _asset: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
