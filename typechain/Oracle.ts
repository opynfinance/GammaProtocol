/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OracleInterface extends utils.Interface {
  contractName: "Oracle";
  functions: {
    "disputeExpiryPrice(address,uint256,uint256)": FunctionFragment;
    "endMigration()": FunctionFragment;
    "getChainlinkRoundData(address,uint80)": FunctionFragment;
    "getDisputer()": FunctionFragment;
    "getExpiryPrice(address,uint256)": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "getPricer(address)": FunctionFragment;
    "getPricerDisputePeriod(address)": FunctionFragment;
    "getPricerLockingPeriod(address)": FunctionFragment;
    "isDisputePeriodOver(address,uint256)": FunctionFragment;
    "isLockingPeriodOver(address,uint256)": FunctionFragment;
    "migrateOracle(address,uint256[],uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAssetPricer(address,address)": FunctionFragment;
    "setDisputePeriod(address,uint256)": FunctionFragment;
    "setDisputer(address)": FunctionFragment;
    "setExpiryPrice(address,uint256,uint256)": FunctionFragment;
    "setLockingPeriod(address,uint256)": FunctionFragment;
    "setStablePrice(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "disputeExpiryPrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endMigration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkRoundData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiryPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(functionFragment: "getPricer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPricerDisputePeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPricerLockingPeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDisputePeriodOver",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLockingPeriodOver",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateOracle",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetPricer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisputePeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setDisputer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setExpiryPrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockingPeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStablePrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "disputeExpiryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpiryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPricer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPricerDisputePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricerLockingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDisputePeriodOver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLockingPeriodOver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetPricer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisputePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisputer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpiryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStablePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "DisputerUpdated(address)": EventFragment;
    "ExpiryPriceDisputed(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ExpiryPriceUpdated(address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PricerDisputePeriodUpdated(address,uint256)": EventFragment;
    "PricerLockingPeriodUpdated(address,uint256)": EventFragment;
    "PricerUpdated(address,address)": EventFragment;
    "StablePriceUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisputerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpiryPriceDisputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpiryPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PricerDisputePeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PricerLockingPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PricerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StablePriceUpdated"): EventFragment;
}

export type DisputerUpdatedEvent = TypedEvent<
  [string],
  { newDisputer: string }
>;

export type DisputerUpdatedEventFilter = TypedEventFilter<DisputerUpdatedEvent>;

export type ExpiryPriceDisputedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    asset: string;
    expiryTimestamp: BigNumber;
    disputedPrice: BigNumber;
    newPrice: BigNumber;
    disputeTimestamp: BigNumber;
  }
>;

export type ExpiryPriceDisputedEventFilter =
  TypedEventFilter<ExpiryPriceDisputedEvent>;

export type ExpiryPriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    asset: string;
    expiryTimestamp: BigNumber;
    price: BigNumber;
    onchainTimestamp: BigNumber;
  }
>;

export type ExpiryPriceUpdatedEventFilter =
  TypedEventFilter<ExpiryPriceUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PricerDisputePeriodUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { pricer: string; disputePeriod: BigNumber }
>;

export type PricerDisputePeriodUpdatedEventFilter =
  TypedEventFilter<PricerDisputePeriodUpdatedEvent>;

export type PricerLockingPeriodUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { pricer: string; lockingPeriod: BigNumber }
>;

export type PricerLockingPeriodUpdatedEventFilter =
  TypedEventFilter<PricerLockingPeriodUpdatedEvent>;

export type PricerUpdatedEvent = TypedEvent<
  [string, string],
  { asset: string; pricer: string }
>;

export type PricerUpdatedEventFilter = TypedEventFilter<PricerUpdatedEvent>;

export type StablePriceUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { asset: string; price: BigNumber }
>;

export type StablePriceUpdatedEventFilter =
  TypedEventFilter<StablePriceUpdatedEvent>;

export interface Oracle extends BaseContract {
  contractName: "Oracle";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    disputeExpiryPrice(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endMigration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainlinkRoundData(
      _asset: string,
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDisputer(overrides?: CallOverrides): Promise<[string]>;

    getExpiryPrice(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getPrice(_asset: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPricer(_asset: string, overrides?: CallOverrides): Promise<[string]>;

    getPricerDisputePeriod(
      _pricer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPricerLockingPeriod(
      _pricer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isDisputePeriodOver(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLockingPeriodOver(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    migrateOracle(
      _asset: string,
      _expiries: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAssetPricer(
      _asset: string,
      _pricer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDisputePeriod(
      _pricer: string,
      _disputePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpiryPrice(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockingPeriod(
      _pricer: string,
      _lockingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStablePrice(
      _asset: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  disputeExpiryPrice(
    _asset: string,
    _expiryTimestamp: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endMigration(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainlinkRoundData(
    _asset: string,
    _roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getDisputer(overrides?: CallOverrides): Promise<string>;

  getExpiryPrice(
    _asset: string,
    _expiryTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  getPrice(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPricer(_asset: string, overrides?: CallOverrides): Promise<string>;

  getPricerDisputePeriod(
    _pricer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPricerLockingPeriod(
    _pricer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isDisputePeriodOver(
    _asset: string,
    _expiryTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLockingPeriodOver(
    _asset: string,
    _expiryTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  migrateOracle(
    _asset: string,
    _expiries: BigNumberish[],
    _prices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAssetPricer(
    _asset: string,
    _pricer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDisputePeriod(
    _pricer: string,
    _disputePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDisputer(
    _disputer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpiryPrice(
    _asset: string,
    _expiryTimestamp: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockingPeriod(
    _pricer: string,
    _lockingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStablePrice(
    _asset: string,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    disputeExpiryPrice(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endMigration(overrides?: CallOverrides): Promise<void>;

    getChainlinkRoundData(
      _asset: string,
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDisputer(overrides?: CallOverrides): Promise<string>;

    getExpiryPrice(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getPrice(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPricer(_asset: string, overrides?: CallOverrides): Promise<string>;

    getPricerDisputePeriod(
      _pricer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPricerLockingPeriod(
      _pricer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDisputePeriodOver(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLockingPeriodOver(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    migrateOracle(
      _asset: string,
      _expiries: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAssetPricer(
      _asset: string,
      _pricer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisputePeriod(
      _pricer: string,
      _disputePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisputer(_disputer: string, overrides?: CallOverrides): Promise<void>;

    setExpiryPrice(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockingPeriod(
      _pricer: string,
      _lockingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStablePrice(
      _asset: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DisputerUpdated(address)"(
      newDisputer?: string | null
    ): DisputerUpdatedEventFilter;
    DisputerUpdated(newDisputer?: string | null): DisputerUpdatedEventFilter;

    "ExpiryPriceDisputed(address,uint256,uint256,uint256,uint256)"(
      asset?: string | null,
      expiryTimestamp?: BigNumberish | null,
      disputedPrice?: null,
      newPrice?: null,
      disputeTimestamp?: null
    ): ExpiryPriceDisputedEventFilter;
    ExpiryPriceDisputed(
      asset?: string | null,
      expiryTimestamp?: BigNumberish | null,
      disputedPrice?: null,
      newPrice?: null,
      disputeTimestamp?: null
    ): ExpiryPriceDisputedEventFilter;

    "ExpiryPriceUpdated(address,uint256,uint256,uint256)"(
      asset?: string | null,
      expiryTimestamp?: BigNumberish | null,
      price?: null,
      onchainTimestamp?: null
    ): ExpiryPriceUpdatedEventFilter;
    ExpiryPriceUpdated(
      asset?: string | null,
      expiryTimestamp?: BigNumberish | null,
      price?: null,
      onchainTimestamp?: null
    ): ExpiryPriceUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PricerDisputePeriodUpdated(address,uint256)"(
      pricer?: string | null,
      disputePeriod?: null
    ): PricerDisputePeriodUpdatedEventFilter;
    PricerDisputePeriodUpdated(
      pricer?: string | null,
      disputePeriod?: null
    ): PricerDisputePeriodUpdatedEventFilter;

    "PricerLockingPeriodUpdated(address,uint256)"(
      pricer?: string | null,
      lockingPeriod?: null
    ): PricerLockingPeriodUpdatedEventFilter;
    PricerLockingPeriodUpdated(
      pricer?: string | null,
      lockingPeriod?: null
    ): PricerLockingPeriodUpdatedEventFilter;

    "PricerUpdated(address,address)"(
      asset?: string | null,
      pricer?: string | null
    ): PricerUpdatedEventFilter;
    PricerUpdated(
      asset?: string | null,
      pricer?: string | null
    ): PricerUpdatedEventFilter;

    "StablePriceUpdated(address,uint256)"(
      asset?: string | null,
      price?: null
    ): StablePriceUpdatedEventFilter;
    StablePriceUpdated(
      asset?: string | null,
      price?: null
    ): StablePriceUpdatedEventFilter;
  };

  estimateGas: {
    disputeExpiryPrice(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endMigration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainlinkRoundData(
      _asset: string,
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputer(overrides?: CallOverrides): Promise<BigNumber>;

    getExpiryPrice(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPricer(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPricerDisputePeriod(
      _pricer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPricerLockingPeriod(
      _pricer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDisputePeriodOver(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLockingPeriodOver(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrateOracle(
      _asset: string,
      _expiries: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAssetPricer(
      _asset: string,
      _pricer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDisputePeriod(
      _pricer: string,
      _disputePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpiryPrice(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockingPeriod(
      _pricer: string,
      _lockingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStablePrice(
      _asset: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    disputeExpiryPrice(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endMigration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainlinkRoundData(
      _asset: string,
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExpiryPrice(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPricer(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPricerDisputePeriod(
      _pricer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPricerLockingPeriod(
      _pricer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDisputePeriodOver(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLockingPeriodOver(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrateOracle(
      _asset: string,
      _expiries: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAssetPricer(
      _asset: string,
      _pricer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDisputePeriod(
      _pricer: string,
      _disputePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDisputer(
      _disputer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpiryPrice(
      _asset: string,
      _expiryTimestamp: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockingPeriod(
      _pricer: string,
      _lockingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStablePrice(
      _asset: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
