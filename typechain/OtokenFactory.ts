/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OtokenFactoryInterface extends utils.Interface {
  contractName: "OtokenFactory";
  functions: {
    "addressBook()": FunctionFragment;
    "createOtoken(address,address,address,uint256,uint256,bool)": FunctionFragment;
    "getOtoken(address,address,address,uint256,uint256,bool)": FunctionFragment;
    "getOtokensLength()": FunctionFragment;
    "getTargetOtokenAddress(address,address,address,uint256,uint256,bool)": FunctionFragment;
    "otokens(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createOtoken",
    values: [string, string, string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOtoken",
    values: [string, string, string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOtokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetOtokenAddress",
    values: [string, string, string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "otokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOtoken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOtokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetOtokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "otokens", data: BytesLike): Result;

  events: {
    "OtokenCreated(address,address,address,address,address,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OtokenCreated"): EventFragment;
}

export type OtokenCreatedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber, boolean],
  {
    tokenAddress: string;
    creator: string;
    underlying: string;
    strike: string;
    collateral: string;
    strikePrice: BigNumber;
    expiry: BigNumber;
    isPut: boolean;
  }
>;

export type OtokenCreatedEventFilter = TypedEventFilter<OtokenCreatedEvent>;

export interface OtokenFactory extends BaseContract {
  contractName: "OtokenFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OtokenFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressBook(overrides?: CallOverrides): Promise<[string]>;

    createOtoken(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOtoken(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOtokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTargetOtokenAddress(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    otokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  addressBook(overrides?: CallOverrides): Promise<string>;

  createOtoken(
    _underlyingAsset: string,
    _strikeAsset: string,
    _collateralAsset: string,
    _strikePrice: BigNumberish,
    _expiry: BigNumberish,
    _isPut: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOtoken(
    _underlyingAsset: string,
    _strikeAsset: string,
    _collateralAsset: string,
    _strikePrice: BigNumberish,
    _expiry: BigNumberish,
    _isPut: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  getOtokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  getTargetOtokenAddress(
    _underlyingAsset: string,
    _strikeAsset: string,
    _collateralAsset: string,
    _strikePrice: BigNumberish,
    _expiry: BigNumberish,
    _isPut: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  otokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addressBook(overrides?: CallOverrides): Promise<string>;

    createOtoken(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getOtoken(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getOtokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetOtokenAddress(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    otokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OtokenCreated(address,address,address,address,address,uint256,uint256,bool)"(
      tokenAddress?: null,
      creator?: null,
      underlying?: string | null,
      strike?: string | null,
      collateral?: string | null,
      strikePrice?: null,
      expiry?: null,
      isPut?: null
    ): OtokenCreatedEventFilter;
    OtokenCreated(
      tokenAddress?: null,
      creator?: null,
      underlying?: string | null,
      strike?: string | null,
      collateral?: string | null,
      strikePrice?: null,
      expiry?: null,
      isPut?: null
    ): OtokenCreatedEventFilter;
  };

  estimateGas: {
    addressBook(overrides?: CallOverrides): Promise<BigNumber>;

    createOtoken(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOtoken(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOtokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetOtokenAddress(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    otokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createOtoken(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOtoken(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOtokensLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTargetOtokenAddress(
      _underlyingAsset: string,
      _strikeAsset: string,
      _collateralAsset: string,
      _strikePrice: BigNumberish,
      _expiry: BigNumberish,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    otokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
