/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MarginVaultTester,
  MarginVaultTesterInterface,
} from "../MarginVaultTester";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
    ],
    name: "getVault",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "shortOtokens",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "longOtokens",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "collateralAssets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "shortAmounts",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "longAmounts",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "collateralAmounts",
            type: "uint256[]",
          },
        ],
        internalType: "struct MarginVault.Vault",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_collateralAsset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "testAddCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_longOtoken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "testAddLong",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_shortOtoken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "testAddShort",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_collateralAsset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "testRemoveCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_longOtoken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "testRemoveLong",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vaultIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_shortOtoken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "testRemoveShort",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107bf806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80633ef3feaf1161005b5780633ef3feaf146100bd5780638a2ae0a8146100d05780639403b634146100e3578063ac7d117a1461010c5761007d565b80631a4b299d146100825780631ac3a5fb1461009757806322786c1f146100aa575b600080fd5b6100956100903660046105f6565b61011f565b005b6100956100a53660046105f6565b6101aa565b6100956100b83660046105f6565b6101ff565b6100956100cb3660046105f6565b610254565b6100956100de3660046105f6565b6102a9565b6100f66100f13660046105de565b6102fe565b60405161010391906106af565b60405180910390f35b61009561011a3660046105f6565b610553565b3360009081526020818152604080832087845290915290819020905163951dd8d360e01b815273__$f483377b159a5ea0e3632e216689e4fd4e$__9163951dd8d3916101749190879087908790600401610765565b60006040518083038186803b15801561018c57600080fd5b505af41580156101a0573d6000803e3d6000fd5b5050505050505050565b3360009081526020818152604080832087845290915290819020905163ef682c1b60e01b815273__$f483377b159a5ea0e3632e216689e4fd4e$__9163ef682c1b916101749190879087908790600401610765565b336000908152602081815260408083208784529091529081902090516301f974ab60e61b815273__$f483377b159a5ea0e3632e216689e4fd4e$__91637e5d2ac0916101749190879087908790600401610765565b33600090815260208181526040808320878452909152908190209051630380bfdd60e61b815273__$f483377b159a5ea0e3632e216689e4fd4e$__9163e02ff740916101749190879087908790600401610765565b3360009081526020818152604080832087845290915290819020905163155bf27360e31b815273__$f483377b159a5ea0e3632e216689e4fd4e$__9163aadf9398916101749190879087908790600401610765565b6103066105a8565b336000908152602081815260408083208584528252918290208251815460e09381028201840190945260c08101848152909391928492849184018282801561037757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610359575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156103d957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103bb575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561043b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161041d575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561049357602002820191906000526020600020905b81548152602001906001019080831161047f575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156104eb57602002820191906000526020600020905b8154815260200190600101908083116104d7575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561054357602002820191906000526020600020905b81548152602001906001019080831161052f575b5050505050815250509050919050565b33600090815260208181526040808320878452909152908190209051637b5c283560e01b815273__$f483377b159a5ea0e3632e216689e4fd4e$__91637b5c2835916101749190879087908790600401610765565b6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6000602082840312156105ef578081fd5b5035919050565b6000806000806080858703121561060b578283fd5b8435935060208501356001600160a01b0381168114610628578384fd5b93969395505050506040820135916060013590565b6000815180845260208085019450808401835b838110156106755781516001600160a01b031687529582019590820190600101610650565b509495945050505050565b6000815180845260208085019450808401835b8381101561067557815187529582019590820190600101610693565b600060208252825160c060208401526106cb60e084018261063d565b60208501519150601f19808583030160408601526106e9828461063d565b6040870151935081868203016060870152610704818561063d565b92505060608601519250808583030160808601526107228284610680565b60808701519350818682030160a087015261073d8185610680565b92505060a08601519250808583030160c08601525061075c8183610680565b95945050505050565b9384526001600160a01b03929092166020840152604083015260608201526080019056fea2646970667358221220b54aaeb124668ab89916afb0db855fc67162134ac86675e72261caa4ae71648a64736f6c634300060a0033";

type MarginVaultTesterConstructorParams =
  | [linkLibraryAddresses: MarginVaultTesterLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarginVaultTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MarginVaultTester__factory extends ContractFactory {
  constructor(...args: MarginVaultTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MarginVaultTester__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
    this.contractName = "MarginVaultTester";
  }

  static linkBytecode(
    linkLibraryAddresses: MarginVaultTesterLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$f483377b159a5ea0e3632e216689e4fd4e\\$__", "g"),
      linkLibraryAddresses["contracts/libs/MarginVault.sol:MarginVault"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MarginVaultTester> {
    return super.deploy(overrides || {}) as Promise<MarginVaultTester>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MarginVaultTester {
    return super.attach(address) as MarginVaultTester;
  }
  connect(signer: Signer): MarginVaultTester__factory {
    return super.connect(signer) as MarginVaultTester__factory;
  }
  static readonly contractName: "MarginVaultTester";
  public readonly contractName: "MarginVaultTester";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarginVaultTesterInterface {
    return new utils.Interface(_abi) as MarginVaultTesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MarginVaultTester {
    return new Contract(address, _abi, signerOrProvider) as MarginVaultTester;
  }
}

export interface MarginVaultTesterLibraryAddresses {
  ["contracts/libs/MarginVault.sol:MarginVault"]: string;
}
