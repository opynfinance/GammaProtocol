/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Mock0xERC20Proxy,
  Mock0xERC20ProxyInterface,
} from "../Mock0xERC20Proxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061041c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632c54de4f14610030575b600080fd5b61004361003e366004610237565b610045565b005b6100606001600160a01b03851684848463ffffffff61006616565b50505050565b610060846323b872dd60e01b858585604051602401610087939291906102ca565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152606061010e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166101569092919063ffffffff16565b805190915015610151578080602001905181019061012c9190610287565b6101515760405162461bcd60e51b815260040161014890610358565b60405180910390fd5b505050565b6060610165848460008561016d565b949350505050565b606061017885610231565b6101945760405162461bcd60e51b815260040161014890610321565b60006060866001600160a01b031685876040516101b191906102ae565b60006040518083038185875af1925050503d80600081146101ee576040519150601f19603f3d011682016040523d82523d6000602084013e6101f3565b606091505b509150915081156102075791506101659050565b8051156102175780518082602001fd5b8360405162461bcd60e51b815260040161014891906102ee565b3b151590565b6000806000806080858703121561024c578384fd5b8435610257816103ce565b93506020850135610267816103ce565b92506040850135610277816103ce565b9396929550929360600135925050565b600060208284031215610298578081fd5b815180151581146102a7578182fd5b9392505050565b600082516102c08184602087016103a2565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208252825180602084015261030d8160408501602087016103a2565b601f01601f19169190910160400192915050565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60005b838110156103bd5781810151838201526020016103a5565b838111156100605750506000910152565b6001600160a01b03811681146103e357600080fd5b5056fea2646970667358221220c50177e2df0d47a9c8fb1adae4d3f95bcaa9d0fde27e911bc9050fa525e8ea3264736f6c634300060a0033";

type Mock0xERC20ProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Mock0xERC20ProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Mock0xERC20Proxy__factory extends ContractFactory {
  constructor(...args: Mock0xERC20ProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Mock0xERC20Proxy";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Mock0xERC20Proxy> {
    return super.deploy(overrides || {}) as Promise<Mock0xERC20Proxy>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Mock0xERC20Proxy {
    return super.attach(address) as Mock0xERC20Proxy;
  }
  connect(signer: Signer): Mock0xERC20Proxy__factory {
    return super.connect(signer) as Mock0xERC20Proxy__factory;
  }
  static readonly contractName: "Mock0xERC20Proxy";
  public readonly contractName: "Mock0xERC20Proxy";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Mock0xERC20ProxyInterface {
    return new utils.Interface(_abi) as Mock0xERC20ProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Mock0xERC20Proxy {
    return new Contract(address, _abi, signerOrProvider) as Mock0xERC20Proxy;
  }
}
