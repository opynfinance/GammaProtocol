/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SignedConverterTester,
  SignedConverterTesterInterface,
} from "../SignedConverterTester";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
    ],
    name: "testFromInt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
    ],
    name: "testFromUint",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061017c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063395413431461003b57806389e616bb14610064575b600080fd5b61004e6100493660046100e3565b610077565b60405161005b91906100fb565b60405180910390f35b61004e6100723660046100e3565b61008a565b600061008282610095565b90505b919050565b6000610082826100b1565b6000808212156100aa57816000039050610085565b5080610085565b6000600160ff1b82106100df5760405162461bcd60e51b81526004016100d690610104565b60405180910390fd5b5090565b6000602082840312156100f4578081fd5b5035919050565b90815260200190565b60208082526022908201527f4669786564506f696e74496e743235363a206f7574206f6620696e742072616e604082015261676560f01b60608201526080019056fea264697066735822122013fdf1fca26acc3fa2d42392f5c4f566e6e34aea9154a776ae283745d2f36b6e64736f6c634300060a0033";

type SignedConverterTesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignedConverterTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignedConverterTester__factory extends ContractFactory {
  constructor(...args: SignedConverterTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SignedConverterTester";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SignedConverterTester> {
    return super.deploy(overrides || {}) as Promise<SignedConverterTester>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SignedConverterTester {
    return super.attach(address) as SignedConverterTester;
  }
  connect(signer: Signer): SignedConverterTester__factory {
    return super.connect(signer) as SignedConverterTester__factory;
  }
  static readonly contractName: "SignedConverterTester";
  public readonly contractName: "SignedConverterTester";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignedConverterTesterInterface {
    return new utils.Interface(_abi) as SignedConverterTesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignedConverterTester {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SignedConverterTester;
  }
}
