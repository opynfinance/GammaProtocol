/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockYToken, MockYTokenInterface } from "../MockYToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pricePerShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pricePerShare",
        type: "uint256",
      },
    ],
    name: "setPricePerShare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f7638038062000f76833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b50604052505050620001b18282620001ce60201b60201c565b620001c660086001600160e01b03620002bc16565b50506200037b565b600054610100900460ff1680620001f35750620001f36001600160e01b03620002d216565b8062000202575060005460ff16155b6200023f5760405162461bcd60e51b815260040180806020018281038252602e81526020018062000f48602e913960400191505060405180910390fd5b600054610100900460ff161580156200026b576000805460ff1961ff0019909116610100171660011790555b825162000280906068906020860190620002d9565b50815162000296906069906020850190620002d9565b50606a805460ff191660121790558015620002b7576000805461ff00191690555b505050565b606a805460ff191660ff92909216919091179055565b303b155b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200031c57805160ff19168380011785556200034c565b828001600101855582156200034c579182015b828111156200034c5782518255916020019190600101906200032f565b506200035a9291506200035e565b5090565b620002d691905b808211156200035a576000815560010162000365565b610bbd806200038b6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806340c10f191161008c57806399530b061161006657806399530b06146102bf578063a457c2d7146102c7578063a9059cbb146102f3578063dd62ed3e1461031f576100ea565b806340c10f191461026557806370a082311461029157806395d89b41146102b7576100ea565b806318160ddd116100c857806318160ddd146101cb57806323b872dd146101e5578063313ce5671461021b5780633950935114610239576100ea565b806306fdde03146100ef578063095ea7b31461016c578063118c9a07146101ac575b600080fd5b6100f761034d565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610131578181015183820152602001610119565b50505050905090810190601f16801561015e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101986004803603604081101561018257600080fd5b506001600160a01b0381351690602001356103e3565b604080519115158252519081900360200190f35b6101c9600480360360208110156101c257600080fd5b5035610400565b005b6101d3610405565b60408051918252519081900360200190f35b610198600480360360608110156101fb57600080fd5b506001600160a01b0381358116916020810135909116906040013561040b565b610223610498565b6040805160ff9092168252519081900360200190f35b6101986004803603604081101561024f57600080fd5b506001600160a01b0381351690602001356104a1565b6101c96004803603604081101561027b57600080fd5b506001600160a01b0381351690602001356104f5565b6101d3600480360360208110156102a757600080fd5b50356001600160a01b0316610503565b6100f761051e565b6101d361057f565b610198600480360360408110156102dd57600080fd5b506001600160a01b038135169060200135610585565b6101986004803603604081101561030957600080fd5b506001600160a01b0381351690602001356105f3565b6101d36004803603604081101561033557600080fd5b506001600160a01b0381358116916020013516610607565b60688054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103d95780601f106103ae576101008083540402835291602001916103d9565b820191906000526020600020905b8154815290600101906020018083116103bc57829003601f168201915b5050505050905090565b60006103f76103f0610632565b8484610636565b50600192915050565b609755565b60675490565b6000610418848484610722565b61048e84610424610632565b61048985604051806060016040528060288152602001610af2602891396001600160a01b038a16600090815260666020526040812090610462610632565b6001600160a01b03168152602081019190915260400160002054919063ffffffff61088b16565b610636565b5060019392505050565b606a5460ff1690565b60006103f76104ae610632565b8461048985606660006104bf610632565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61092216565b6104ff8282610983565b5050565b6001600160a01b031660009081526065602052604090205490565b60698054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103d95780601f106103ae576101008083540402835291602001916103d9565b60975481565b60006103f7610592610632565b8461048985604051806060016040528060258152602001610b6360259139606660006105bc610632565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff61088b16565b60006103f7610600610632565b8484610722565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661067b5760405162461bcd60e51b8152600401808060200182810382526024815260200180610b3f6024913960400191505060405180910390fd5b6001600160a01b0382166106c05760405162461bcd60e51b8152600401808060200182810382526022815260200180610aaa6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260666020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107675760405162461bcd60e51b8152600401808060200182810382526025815260200180610b1a6025913960400191505060405180910390fd5b6001600160a01b0382166107ac5760405162461bcd60e51b8152600401808060200182810382526023815260200180610a876023913960400191505060405180910390fd5b6107b7838383610a81565b6107fa81604051806060016040528060268152602001610acc602691396001600160a01b038616600090815260656020526040902054919063ffffffff61088b16565b6001600160a01b03808516600090815260656020526040808220939093559084168152205461082f908263ffffffff61092216565b6001600160a01b0380841660008181526065602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561091a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108df5781810151838201526020016108c7565b50505050905090810190601f16801561090c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008282018381101561097c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b0382166109de576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6109ea60008383610a81565b6067546109fd908263ffffffff61092216565b6067556001600160a01b038216600090815260656020526040902054610a29908263ffffffff61092216565b6001600160a01b03831660008181526065602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122051a6661f1de854f04b33bae8dad089ac222603a8793c1f17bb6ab4b61174a04d64736f6c634300060a0033436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564";

type MockYTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockYTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockYToken__factory extends ContractFactory {
  constructor(...args: MockYTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockYToken";
  }

  deploy(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockYToken> {
    return super.deploy(_name, _symbol, overrides || {}) as Promise<MockYToken>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, overrides || {});
  }
  attach(address: string): MockYToken {
    return super.attach(address) as MockYToken;
  }
  connect(signer: Signer): MockYToken__factory {
    return super.connect(signer) as MockYToken__factory;
  }
  static readonly contractName: "MockYToken";
  public readonly contractName: "MockYToken";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockYTokenInterface {
    return new utils.Interface(_abi) as MockYTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockYToken {
    return new Contract(address, _abi, signerOrProvider) as MockYToken;
  }
}
