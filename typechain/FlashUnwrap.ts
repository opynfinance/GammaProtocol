/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FlashUnwrapInterface extends utils.Interface {
  contractName: "FlashUnwrap";
  functions: {
    "WETH()": FunctionFragment;
    "callFunction(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "callFunction",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callFunction",
    data: BytesLike
  ): Result;

  events: {
    "UnwrappedETH(address,uint256)": EventFragment;
    "WrappedETH(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UnwrappedETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrappedETH"): EventFragment;
}

export type UnwrappedETHEvent = TypedEvent<
  [string, BigNumber],
  { to: string; amount: BigNumber }
>;

export type UnwrappedETHEventFilter = TypedEventFilter<UnwrappedETHEvent>;

export type WrappedETHEvent = TypedEvent<
  [string, BigNumber],
  { to: string; amount: BigNumber }
>;

export type WrappedETHEventFilter = TypedEventFilter<WrappedETHEvent>;

export interface FlashUnwrap extends BaseContract {
  contractName: "FlashUnwrap";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlashUnwrapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    callFunction(
      _sender: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  callFunction(
    _sender: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    callFunction(
      _sender: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "UnwrappedETH(address,uint256)"(
      to?: null,
      amount?: null
    ): UnwrappedETHEventFilter;
    UnwrappedETH(to?: null, amount?: null): UnwrappedETHEventFilter;

    "WrappedETH(address,uint256)"(
      to?: string | null,
      amount?: null
    ): WrappedETHEventFilter;
    WrappedETH(to?: string | null, amount?: null): WrappedETHEventFilter;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    callFunction(
      _sender: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callFunction(
      _sender: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
