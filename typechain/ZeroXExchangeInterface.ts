/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ZeroXExchangeInterface {
  export type LimitOrderStruct = {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumberish;
    takerAmount: BigNumberish;
    takerTokenFeeAmount: BigNumberish;
    maker: string;
    taker: string;
    sender: string;
    feeRecipient: string;
    pool: BytesLike;
    expiry: BigNumberish;
    salt: BigNumberish;
  };

  export type LimitOrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumber;
    takerAmount: BigNumber;
    takerTokenFeeAmount: BigNumber;
    maker: string;
    taker: string;
    sender: string;
    feeRecipient: string;
    pool: string;
    expiry: BigNumber;
    salt: BigNumber;
  };

  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [number, number, string, string] & {
    signatureType: number;
    v: number;
    r: string;
    s: string;
  };
}

export interface ZeroXExchangeInterfaceInterface extends utils.Interface {
  contractName: "ZeroXExchangeInterface";
  functions: {
    "batchFillLimitOrders((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],uint128[],bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchFillLimitOrders",
    values: [
      ZeroXExchangeInterface.LimitOrderStruct[],
      ZeroXExchangeInterface.SignatureStruct[],
      BigNumberish[],
      boolean
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchFillLimitOrders",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ZeroXExchangeInterface extends BaseContract {
  contractName: "ZeroXExchangeInterface";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZeroXExchangeInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchFillLimitOrders(
      orders: ZeroXExchangeInterface.LimitOrderStruct[],
      signatures: ZeroXExchangeInterface.SignatureStruct[],
      takerTokenFillAmounts: BigNumberish[],
      revertIfIncomplete: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  batchFillLimitOrders(
    orders: ZeroXExchangeInterface.LimitOrderStruct[],
    signatures: ZeroXExchangeInterface.SignatureStruct[],
    takerTokenFillAmounts: BigNumberish[],
    revertIfIncomplete: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchFillLimitOrders(
      orders: ZeroXExchangeInterface.LimitOrderStruct[],
      signatures: ZeroXExchangeInterface.SignatureStruct[],
      takerTokenFillAmounts: BigNumberish[],
      revertIfIncomplete: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        takerTokenFilledAmounts: BigNumber[];
        makerTokenFilledAmounts: BigNumber[];
      }
    >;
  };

  filters: {};

  estimateGas: {
    batchFillLimitOrders(
      orders: ZeroXExchangeInterface.LimitOrderStruct[],
      signatures: ZeroXExchangeInterface.SignatureStruct[],
      takerTokenFillAmounts: BigNumberish[],
      revertIfIncomplete: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchFillLimitOrders(
      orders: ZeroXExchangeInterface.LimitOrderStruct[],
      signatures: ZeroXExchangeInterface.SignatureStruct[],
      takerTokenFillAmounts: BigNumberish[],
      revertIfIncomplete: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
